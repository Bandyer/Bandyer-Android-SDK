/*
 * Copyright (C) 2019 Bandyer S.r.l. All Rights Reserved.
 * See LICENSE.txt for licensing information
 */

buildscript {
    repositories {
        google()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
        classpath "com.github.triplet.gradle:play-publisher:2.2.1"
        classpath 'com.google.firebase:firebase-appdistribution-gradle:1.2.0'
    }
}

apply plugin: 'com.android.application'
apply from: 'versions.gradle'
apply plugin: 'io.fabric'
apply plugin: "com.github.triplet.play"
apply plugin: 'com.google.firebase.appdistribution'

def gsonVersion = '2.8.5'
def okHttpVersion = '3.12.0'
def stethoVersion = "1.5.1"
def retrofitVersion = '2.6.1'
def leakCanaryVersion = "2.0-beta-3"
def butterKnifeVersion = "10.1.0"
def fastAdapterVersion = "3.3.1"
def picassoLibVersion = "2.71828"
def jUnitLibVersion = "4.12"
def multiDexLibVersion = "2.0.1"
def crashlyticsLibVersion = "2.10.1"
def firebaseMessagingLibVersion = '20.0.1'
def phoenixProcessLibVersion = "2.0.0"
def work_version = '2.2.0'
def bandyerLibVersion = "1.4.3"
def androidX = '1.0.2'
def androidDesign = '1.0.0'
def androidXPreference = "1.1.0"
def constraintLayoutVersion = "1.1.3"
def lifecycleVersion = "2.1.0"
def expansionLayoutVersion = "1.2.2"

android {
    compileSdkVersion sdkVersion
    buildToolsVersion buildToolsVersion
    defaultConfig {
        applicationId "com.bandyer.demo_android_sdk"
        minSdkVersion 16
        targetSdkVersion sdkVersion
        versionCode VERSION_CODE.toInteger()
        versionName bandyerLibVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                // Fabric api key
                fabric_api_key: crashlyticsAppId()
        ]
        multiDexEnabled true
    }

    dexOptions {
        preDexLibraries = false
    }

    signingConfigs {
        debug {
            if (keyStoreFilePath(name)?.trim()) {
                keyAlias keyStoreAlias(name)
                keyPassword keyStorePassword(name)
                storeFile file(keyStoreFilePath(name))
                storePassword keyStorePassword(name)
            }
        }
        release {
            if (keyStoreFilePath(name)?.trim()) {
                keyAlias keyStoreAlias(name)
                keyPassword keyStorePassword(name)
                storeFile file(keyStoreFilePath(name))
                storePassword keyStorePassword(name)
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (keyStoreFilePath(name)?.trim()) signingConfig signingConfigs.release
            buildConfigField 'boolean', 'ENABLE_CRASHLYTICS', 'true'
            buildConfigField "boolean", "USE_LEAK_CANARY", "false"
            buildConfigField "boolean", "USE_MOCK_USER_DETAILS_PROVIDER", "false"
            buildConfigField "boolean", "USE_SIMPLIFIED_VERSION", "true"
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix '-DEBUG'
            if (keyStoreFilePath(name)?.trim()) signingConfig signingConfigs.debug

            // Firebase distribution
            if (getDistributionCredentialsFilePath(name)?.trim()) firebaseAppDistribution {
                appId getDistributionAppId(name)
                serviceCredentialsFile getDistributionCredentialsFilePath(name)
                releaseNotes getDistributionReleaseNotes()
                groups getDistributionTestGroup()
            }

            buildConfigField 'boolean', 'ENABLE_CRASHLYTICS', 'false'
            buildConfigField "boolean", "USE_LEAK_CANARY", "$useLeakCanary"
            buildConfigField "boolean", "USE_MOCK_USER_DETAILS_PROVIDER", "$useMockUserDetailsProvider"
            buildConfigField "boolean", "USE_SIMPLIFIED_VERSION", "false"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // If you are not building an AAB, which we recommend you to do.
    // You can optionally configures multiple APKs based on screen density and cpu architecture.
    // Be aware that you will need to handle the versionCode differently for each split.

    // For further information see:
    // https://developer.android.com/studio/build/configure-apk-splits
    // and to see a more in depth guide:
    // https://androidbycode.wordpress.com/2015/06/30/android-ndk-version-code-scheme-for-publishing-apks-per-architecture/
    splits {

        abi {
            enable true
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            universalApk true
        }

        // Optionally configures multiple APKs based on screen density.
        density {
            enable true
            compatibleScreens 'small', 'normal', 'large', 'xlarge'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    /*** Platform ***/
    implementation "androidx.multidex:multidex:$multiDexLibVersion"

    implementation "androidx.appcompat:appcompat:$androidX"
    implementation "com.google.android.material:material:$androidDesign"
    implementation "androidx.recyclerview:recyclerview:$androidDesign"
    implementation "androidx.preference:preference:$androidXPreference"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    implementation "androidx.work:work-runtime:$work_version"

    /*** Testing ***/
    testImplementation "junit:junit:$jUnitLibVersion"

    /*** Networking ***/
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.facebook.stetho:stetho:$stethoVersion"
    implementation "com.facebook.stetho:stetho-okhttp3:$stethoVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    /*** Utility ***/

    implementation "com.jakewharton:process-phoenix:$phoenixProcessLibVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "com.jakewharton:butterknife:$butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"

    /*** UI ***/
    implementation "com.mikepenz:fastadapter:$fastAdapterVersion"
    implementation "com.squareup.picasso:picasso:$picassoLibVersion"
    implementation "com.github.florent37:expansionpanel:$expansionLayoutVersion"

    /*** Firebase Cloud Messaging ***/
    implementation "com.google.firebase:firebase-messaging:$firebaseMessagingLibVersion"

    /*** Pushy notification service, useful for China ***/
    implementation 'me.pushy:sdk:1.0.53'

    /*** Crashlytics ***/
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlyticsLibVersion"

    /*** Bandyer Android SDK ***/
    implementation "com.bandyer:bandyer-android-sdk:$bandyerLibVersion"
}

play {
    def canPublish = playStoreCredentialsFilePath()?.trim()
    if (canPublish) serviceAccountCredentials = file(playStoreCredentialsFilePath())
    track = "beta"
    enabled = canPublish
    defaultToAppBundles = true
}

/**
 * The following code is used to release the demo App on firebase
 * This code is also prepared to be tweaked to support different flavors
 */
android.applicationVariants.all { variant ->
    versions.apply(variant)
    variant.outputs.each { output ->
        // Filter is null for universal APKs.
        def filter = output.getFilter(com.android.build.OutputFile.ABI)

        if (filter == null) {

            def variantSuffix = variant.name.capitalize()

            tasks.findAll {
                it.name.startsWith("appDistributionUpload${variantSuffix}")
            }.each {
                it.doFirst {
                    it.appDistributionProperties.apkPath = output.outputFile.absolutePath
                }
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'// Google Play services Gradle plugin