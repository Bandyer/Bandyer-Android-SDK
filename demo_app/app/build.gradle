/*
 * Copyright (C) 2019 Bandyer S.r.l. All Rights Reserved.
 * See LICENSE.txt for licensing information
 */

buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://maven.fabric.io/public' }
        google()
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def gsonVersion = '2.8.5'
def okHttpVersion = '3.12.0'
def stethoVersion = "1.5.1"
def retrofitVersion = '2.6.0'
def leakCanaryVersion = "2.0-alpha-3"
def butterKnifeVersion = "10.1.0"
def fastAdapterVersion = "3.3.1"
def picassoLibVersion = "2.71828"
def jUnitLibVersion = "4.12"
def multiDexLibVersion = "2.0.1"
def crashlyticsLibVersion = "2.10.1"
def firebaseMessagingLibVersion = '19.0.1'
def phoenixProcessLibVersion = "2.0.0"
def work_version = "2.1.0"
def bandyerLibVersion = "1.3.0"
def androidX = "1.0.0"
def androidXPreference = "1.1.0-rc01"
def constraintLayoutVersion = "1.1.3"
def lifecycleVersion = "2.0.0"
def expansionLayoutVersion = "1.2.2"

android {
    compileSdkVersion sdkVersion
    buildToolsVersion buildToolsVersion
    defaultConfig {
        applicationId "com.bandyer.demo_android_sdk"
        minSdkVersion 16
        targetSdkVersion sdkVersion
        versionCode 1
        versionName bandyerLibVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                // Fabric api key
                fabric_api_key: crashlyticsAppId()
        ]
        multiDexEnabled true
    }

    dexOptions {
        preDexLibraries = false
    }

    signingConfigs {
        debug {
            if (keyStoreFilePath(name)?.trim()) {
                keyAlias keyStoreAlias(name)
                keyPassword keyStorePassword(name)
                storeFile file(keyStoreFilePath(name))
                storePassword keyStorePassword(name)
            }
        }
        release {
            if (keyStoreFilePath(name)?.trim()) {
                keyAlias keyStoreAlias(name)
                keyPassword keyStorePassword(name)
                storeFile file(keyStoreFilePath(name))
                storePassword keyStorePassword(name)
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (keyStoreFilePath(name)?.trim()) signingConfig signingConfigs.release
            ext.betaDistributionReleaseNotes = fabricReleaseNotes()
            ext.betaDistributionGroupAliases = fabricTestGroup()
        }
        debug {
            if (keyStoreFilePath(name)?.trim()) signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Optionally configures multiple APKs based on screen density and cpu architecture.
    // For further information see: https://developer.android.com/studio/build/configure-apk-splits
    splits {

        abi {
            enable true
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            universalApk true
        }

        // Optionally configures multiple APKs based on screen density.
        density {
            enable true
            compatibleScreens 'small', 'normal', 'large', 'xlarge'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    /*** Platform ***/
    implementation "androidx.multidex:multidex:$multiDexLibVersion"

    implementation "androidx.appcompat:appcompat:$androidX"
    implementation "com.google.android.material:material:$androidX"
    implementation "androidx.recyclerview:recyclerview:$androidX"
    implementation "androidx.preference:preference:$androidXPreference"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    implementation "androidx.work:work-runtime:$work_version"

    /*** Testing ***/
    testImplementation "junit:junit:$jUnitLibVersion"

    /*** Networking ***/
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.facebook.stetho:stetho:$stethoVersion"
    implementation "com.facebook.stetho:stetho-okhttp3:$stethoVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    /*** Utility ***/

    implementation "com.jakewharton:process-phoenix:$phoenixProcessLibVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "com.jakewharton:butterknife:$butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"
    implementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"

    /*** UI ***/
    implementation "com.mikepenz:fastadapter:$fastAdapterVersion"
    implementation "com.squareup.picasso:picasso:$picassoLibVersion"
    implementation "com.github.florent37:expansionpanel:$expansionLayoutVersion"

    /*** Firebase Cloud Messaging ***/
    implementation "com.google.firebase:firebase-messaging:$firebaseMessagingLibVersion"

    /*** Fabric Crashlytics ***/
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlyticsLibVersion"

    /*** Bandyer Android SDK ***/
    implementation "com.bandyer:bandyer-android-sdk:$bandyerLibVersion"
}

/**
 * The following code is used to release the demo App on fabric
 * This code is also prepared to be tweaked to support different flavors
 */
File crashlyticsProperties = new File("${project.projectDir.absolutePath}/fabric.properties")

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        // Filter is null for universal APKs.
        def filter = output.getFilter(com.android.build.OutputFile.ABI)

        if (filter == null) {

            def variantSuffix = variant.name.capitalize()

            def generatePropertiesTask = task("crashlyticsGenerateProperties${variantSuffix}") {
                doLast {
                    Properties properties = new Properties()
                    properties.put("apiSecret", fabricApiSecret())
                    println "Setting apiSecret: ${fabricApiSecret()} to fabric.properties"
                    properties.store(new FileWriter(crashlyticsProperties), "")
                }
            }

            def removePropertiesTask = task("crashlyticsRemoveProperties${variantSuffix}") {
                doLast {
                    println "Removing fabric.properties"
                    crashlyticsProperties.delete()
                }
            }

            tasks.findAll {
                it.name.startsWith(
                        "crashlyticsUploadDistribution${variantSuffix}")
            }.each {
                it.dependsOn generatePropertiesTask
                it.finalizedBy removePropertiesTask
                it.doFirst {
                    ext.betaDistributionApkFilePath = output.outputFile.absolutePath
                }
            }

            tasks.findAll {
                it.name.startsWith(
                        "crashlyticsUploadSymbols${variantSuffix}")
            }.each {
                it.doFirst {
                    ext.betaDistributionApkFilePath = output.outputFile.absolutePath
                }
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'// Google Play services Gradle plugin