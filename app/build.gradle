/*
 * Copyright (C) 2020 Bandyer S.r.l. All Rights Reserved.
 * See LICENSE.txt for licensing information
 */

buildscript {
    repositories {
        google()
        maven { url 'https://jitpack.io' }
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://maven.fabric.io/public' }
        maven {url 'https://developer.huawei.com/repo/'}
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'com.github.triplet.play:com.github.triplet.play.gradle.plugin:2.8.1'
        classpath 'com.google.firebase:firebase-appdistribution-gradle:2.2.0'
        classpath 'com.huawei.agconnect:agcp:1.4.2.300'
        classpath "ru.cian:huawei-publish-gradle-plugin:1.2.1"
    }
}

apply plugin: 'com.android.application'
apply from: 'versions.gradle'
apply plugin: "com.github.triplet.play"
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'ru.cian.huawei-publish'

def leakCanaryVersion = '2.7'
def jUnitLibVersion = '4.13.2'
def multiDexLibVersion = "2.0.1"
def firebaseMessagingLibVersion = '20.2.3'
def work_version = '2.7.0'
def bandyerLibVersion = "2.2.15"
def bandyerExtensionUsbCamera = "1.1.8"
def pushy_version = '1.0.56'
def huawei_push_version = '6.1.0.300'
def androidX = '1.1.0'

android {
    compileSdkVersion sdkVersion
    buildToolsVersion buildToolsVersion
    defaultConfig {
        applicationId "com.bandyer.demo_android_sdk"
        minSdkVersion 21
        targetSdkVersion sdkVersion
        versionCode VERSION_CODE.toInteger()
        versionName bandyerLibVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    dexOptions {
        preDexLibraries = false
    }

    signingConfigs {
        debug {
            if (keyStoreFilePath(name)?.trim()) {
                keyAlias keyStoreAlias(name)
                keyPassword keyStorePassword(name)
                storeFile file(keyStoreFilePath(name))
                storePassword keyStorePassword(name)
            }
        }
        release {
            if (keyStoreFilePath(name)?.trim()) {
                keyAlias keyStoreAlias(name)
                keyPassword keyStorePassword(name)
                storeFile file(keyStoreFilePath(name))
                storePassword keyStorePassword(name)
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (keyStoreFilePath(name)?.trim()) signingConfig signingConfigs.release

            if (getDistributionCredentialsFilePath(name)?.trim()) firebaseAppDistribution {
                appId getDistributionAppId(name)
                serviceCredentialsFile getDistributionCredentialsFilePath(name)
                releaseNotes getDistributionReleaseNotes(bandyerLibVersion)
                groups getDistributionTestGroup()
            }

            firebaseCrashlytics {
                nativeSymbolUploadEnabled false
                mappingFileUploadEnabled false
            }
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix '-DEBUG'
            if (keyStoreFilePath(name)?.trim()) signingConfig signingConfigs.debug

            // Firebase distribution
            if (getDistributionCredentialsFilePath(name)?.trim()) firebaseAppDistribution {
                appId getDistributionAppId(name)
                serviceCredentialsFile getDistributionCredentialsFilePath(name)
                releaseNotes getDistributionReleaseNotes(bandyerLibVersion)
                groups getDistributionTestGroup()
            }
            firebaseCrashlytics {
                nativeSymbolUploadEnabled false
                mappingFileUploadEnabled false
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
    }
}

huaweiPublish {
    instances {
        release {
            clientId = getHmsClientId()
            clientSecret = getHmsClientSecret()
            buildFormat = "aab"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    /*** Platform ***/
    implementation "androidx.multidex:multidex:$multiDexLibVersion"
    implementation "androidx.appcompat:appcompat:$androidX"

    /*** Testing ***/
    testImplementation "junit:junit:$jUnitLibVersion"

    /*** Utilities & Debug Tools ***/
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"

    /*** Notification ***/
    implementation "com.google.firebase:firebase-messaging:$firebaseMessagingLibVersion"
    implementation "androidx.work:work-runtime:$work_version"

    /*** Notification alternative ***/
    implementation "me.pushy:sdk:$pushy_version"
    implementation "com.huawei.hms:push:$huawei_push_version"

    /** Utilities **/
    implementation project(":app_utilities")
    implementation project(":app_configuration")
    implementation project(":app_design")

    /*** Bandyer Android SDK ***/
    implementation "com.bandyer:bandyer-android-sdk:$bandyerLibVersion"

    // define this dependency only if you desire to handle usb camera input in a video call
    implementation "com.bandyer:extension_usb_camera:$bandyerExtensionUsbCamera"
}

play {
    def canPublish = playStoreCredentialsFilePath()?.trim()
    if (canPublish) serviceAccountCredentials = file(playStoreCredentialsFilePath())
    track = "beta"
    enabled = canPublish
    defaultToAppBundles = true
}